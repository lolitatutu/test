#include <stdio.h>
#include <iostream>
#include "opencv2/core.hpp"
#include "opencv2/features2d.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/xfeatures2d.hpp"
using namespace cv;
using namespace std;
using namespace cv::xfeatures2d;
void readme();
/* @function main */
int main( int argc, char** argv )
{
  double t=(double)getTickCount();
  if( argc != 3 )
   { return -1; }
  Mat img_1 = imread( argv[1], IMREAD_GRAYSCALE );
  Mat img_2 = imread( argv[2], IMREAD_GRAYSCALE );
  if( !img_1.data || !img_2.data )
   { return -1; }
  
  //-- Step 1: Detect the keypoints using SURF Detector, compute the descriptors
  Ptr<ORB> orb=ORB::create();
  vector<KeyPoint>keyPoints_1,keyPoints_2;
  
  Mat descriptors_1, descriptors_2;
  orb->detectAndCompute( img_1, Mat(), keyPoints_1, descriptors_1 );
  orb->detectAndCompute( img_2, Mat(), keyPoints_2, descriptors_2 );
  //-- Step 2: Matching descriptor vectors with a brute force matcher
  //BruteForceMatcher()  
  BFMatcher matcher(NORM_L2);
  vector< DMatch > matches;
  matcher.match( descriptors_1, descriptors_2, matches );
  //-- Draw matches
  Mat img_matches;
  drawMatches( img_1, keyPoints_1, img_2, keyPoints_2, matches, img_matches );
  t=(double)getTickCount()-t;

  //-- Show detected matches
  imshow("Matches", img_matches );
  //cout<<"zhenglv="<<(double)getTickFrequency()/t<<")ms"<<endl;
  cout<<"exec time=("<<t/((double)getTickFrequency()*1000)<<")ms"<<endl;
  waitKey(0);
  return 0;
  }
 /* @function readme */
 void readme()
 { std::cout << " Usage: ./SURF_descriptor <img1> <img2>" << std::endl; }
