#include <opencv2/video/video.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/core/core.hpp>
#include<opencv2/calib3d/calib3d.hpp>
#include<iostream>
#include<cstdio>

using namespace std;
using namespace cv;

bool addNewPoints();
bool acceptTrackedPoint(int i);
Mat tracking(Mat frame);

vector<Point2f>points[2];// point0为特征点的原来位置，point1为特征点的新位置
vector<Point2f>features;// 检测的特征
vector<Point2f>initial; // 初始化跟踪点的位置
vector<uchar>status;   // 跟踪特征的状态，特征的流发现为1，否则为0
vector<float>err;
int maxCount=500;
double qLevel=0.01;
double minDist=10.0;
int number=1;

int main()
{
	FILE *fp;
	char imagepath[200];
	int imagecount=0;
	fp=fopen("rgb1.txt","r");
	while(!feof(fp))
	{
		while(fscanf(fp,"%s",imagepath) > 0)
		{
			double t=getTickCount();
			Mat img=imread(imagepath);
			Mat result=tracking(img);
			imshow("flow",result);
			t=((double)getTickCount()-t)*1000/(getTickFrequency());
			cout<<"time=("<<t<<")ms"<<endl;
			waitKey(0);
		}
	}
	waitKey(0);
	return 0;
}

Mat tracking(Mat frame)
{
	static Mat gray_prev;
	Mat gray;
	cvtColor(frame,gray,COLOR_BGR2GRAY);
	Mat output;
	frame.copyTo(output);
	// 添加特征点
	if(addNewPoints())
	{
		goodFeaturesToTrack(gray,features,maxCount,qLevel,minDist);
		points[0].insert(points[0].end(),features.begin(),features.end());
		initial.insert(initial.end(),features.begin(),features.end());
	}
	if(gray_prev.empty())
	{
		gray.copyTo(gray_prev);
	}
	calcOpticalFlowPyrLK(gray_prev,gray,points[0],points[1],status,err);
	
	// 去掉一些不好的特征点
	int k=0;
	for(size_t i=0;i<points[1].size();i++)
	{
		if(acceptTrackedPoint(i))
		{
			initial[k]=initial[i];
			points[1][k++]=points[1][i];
		}
	}
	//findHomography
	
	number++;
	vector<Point2f> obj = points[0];
	vector<Point2f> scene=points[1];
	vector<Point2f> homo;
	if(number>1 )
	{
		
		Mat H=findHomography(obj,scene,CV_RANSAC);
		if(H.cols=3)
		{
			//cout<<H<<endl;
			/*Mat hpoint;
			for(size_t i=0;i<points[1].size();i++)
			{
				Point P0=points[1][i];
				Mat P1=Mat(P0);
				P1.convertTo(P1, CV_64F);
				P1.push_back(1.0);
				//transpose(P1,P1);
				//cout<<P1<<endl;
				//cout<<H<<endl;
				hpoint=H*P1;
				//cout<<hpoint<<endl;
				double tx=hpoint.at<double>(0);
				double ty=hpoint.at<double>(1);
				double tz=hpoint.at<double>(2);
				double px=tx/tz;
				double py=ty/tz;
				Point2f P3(px,py);
				//cout<<P3<<"la"<<endl;
				homo.push_back(P3);
				//cout<<homo<<"heihei"<<endl;
				
			}
			for(size_t j=0;j<points[1].size();j++)
			{
				//circle(output,points[1][j],3,Scalar(0,255,0),-1);
				circle(output,initial[j],3,Scalar(0,255,0),-1);
				circle(output,homo[j],3,Scalar(0,0,255),-1);
				line(output,initial[j],homo[j],Scalar(255,0,0));
			}*/
			Mat hpoint;
			for(size_t i=0;i<points[0].size();i++)
			{
				Point P0=points[0][i];
				Mat P1=Mat(P0);
				P1.convertTo(P1, CV_64F);
				P1.push_back(1.0);
				//transpose(P1,P1);
				//cout<<P1<<endl;
				//cout<<H<<endl;
				hpoint=H*P1;
				//cout<<hpoint<<endl;
				double tx=hpoint.at<double>(0);
				double ty=hpoint.at<double>(1);
				double tz=hpoint.at<double>(2);
				double px=tx/tz;
				double py=ty/tz;
				Point2f P3(px,py);
				//cout<<P3<<"la"<<endl;
				homo.push_back(P3);
				//cout<<homo<<"heihei"<<endl;
				
			}
			for(size_t j=0;j<initial.size();j++)
			{
				//circle(output,points[1][j],3,Scalar(0,255,0),-1);
				circle(output,points[0][j],3,Scalar(0,255,0),-1);//green
				circle(output,homo[j],3,Scalar(0,0,255),-1);//blue
				line(output,points[0][j],homo[j],Scalar(255,0,0));//red
			}
		}
	
	}
	
	points[1].resize(k);
	initial.resize(k);
	//cout<<points[1]<<endl;
	//cout<<points[0]<<endl;
	
	for(size_t i=0;i<points[1].size();i++)
	{
		//line(output,initial[i],points[1][i],Scalar(0,0,255));
		//circle(output,points[1][i],3,Scalar(0,255,0),-1);
		//circle(output,initial[i],3,Scalar(0,0,255),-1);
	}
	cout<<points[1].size()<<endl;
	swap(points[1],points[0]);
	swap(gray_prev,gray);
	return output;
}


//检测新点是否应该被添加 
bool addNewPoints()
{
	return points[0].size()<=10;
}
//决定哪些跟踪点被接受
bool acceptTrackedPoint(int i)
{
	return status[i]&&((abs(points[0][i].x-points[1][i].x)+abs(points[0][i].y-points[1][i].y))>2);
}
